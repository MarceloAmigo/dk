#!/bin/bash
#
#  dockerc
#
VERSION="v0.9.7.6 29/07/2020"




SOFT=$(diff -q  /usr/bin/dk <(wget -q -O- https://raw.githubusercontent.com/uGeek/dockerc/master/dockerc 2>/dev/null))

if [ "$(cat ~/.config/dockerc/last.log 2>/dev/null)" != "$(date +"%Y%m%d")" ]
then
echo $(date +"%Y%m%d") >  ~/.config/dockerc/last.log
if [ "$SOFT" = "" ]
then
echo "" 2>/dev/null
else
echo
echo -e "\e[31mHay una nueva actualización de la aplicación\e[0m \e[1mdockerc\e[0m"
echo -en "¿Quieres actualizar ahora? [si/No]: "
read RESPONSE
if [ $RESPONSE == si ] || [ $RESPONSE == SI ] || [ $RESPONSE == s ] || [ $RESPONSE == S ]
then
sudo curl -L https://raw.githubusercontent.com/uGeek/dockerc/master/dockerc \
          -o /usr/bin/dk && sudo chmod +x /usr/bin/dk
clear	  
echo -e "\n\t\e[1mdockerc.\e[0m \e[92mVersión $(wget -q -O- https://raw.githubusercontent.com/uGeek/dockerc/master/dockerc | grep "^VERSION=" | cut -d "=" -f2 | sed s'|"||'g) actualizada con éxito! \e[0m\n"	  
else 
echo ""
fi
exit 0
fi
fi




if [ ! -f ~/.config/dockerc/dockerc.conf ]; then
    while true; do
        echo ""
        read -rp "El archivo de configuración no está creado, ¿Quieres crearlo ahora? (s/n) " yn
        case "${yn}" in
            [Ss]* ) mkdir -p  ~/.config/dockerc/
		    echo -en "\n Escribe la ruta completa del directorio donde tienes o quieres guardar tus docker-dotfile \n\n\t Ejemplo: /home/usuario/dockerc: "
		    read RUTA ; echo "RUTA_DOCKER_DOTFILE='"$RUTA"'" > ~/.config/dockerc/dockerc.conf
		    echo -en "\n ¿Que editor de texto quieres utilizar? \n\n\t Ejemplo: vim: "
		    read EDITOR ; echo "EDITOR='"$EDITOR"'" >> ~/.config/dockerc/dockerc.conf
		    break;;
            [Nn]* ) exit;;
            * ) echo "Please answer y or n";;
        esac
    done
fi

source ~/.config/dockerc/dockerc.conf

if [ "$1" = "-v" ] || [ "$1" = "--version" ] || [ "$1" = "v" ] 
then
echo "$VERSION"
exit
fi

if [ "$1" = "-h" ] || [ "$1" = "--help" ] || [ "$1" = "h" ]
then
echo "
Modo de empleo: dockerc [OPCIONES]

dk                       -> Menú para crear un contendor guardado con docker o docker-compose
dk   vc                  -> Menú para ver un contendor guardado con docker o docker-compose (show, see) 
dk   a                   -> Automontaje de todos los dockers de un grupo (add)
dk   n                   -> Guarda un nuevo docker (new)
dk   i                   -> Imagenes listadas por creación (image)
dk   u, up, start        -> Lista dockers con su número para iniciar (up)
dk   d, down, stop       -> Lista dockers corriendo, con su número para detener (down)
dk   r, restart          -> Reiniciando docker  
dk   d -a, stop -a, ...  -> Detener todos los contenedores 
dk   e, exec             -> Entrar dentro del contenedor
dk   ip                  -> Conoce la ip de un docker
dk   ls ip, ip -a        -> Listar todas las ip's
dk   ls, ps              -> Dockers que están corriendo y sus puertos (list)
dk   ls -a, ps -a        -> Todos los Dockers disponibles (list all)
dk   st, store           -> Descarga Dockers de la store de dockerc
dk   rm                  -> Lista contenedores con su número para ser borrado (remove)
dk   drm                 -> Lista contenedores con su número para ser detenido y borrado (down and remove)
dk   rmi                 -> Lista imagenes con su número para ser borradas (remove image)
dk   l, log              -> Lista contendores con su número, para ver los logs
dk   s, stats            -> Ver consumo de cpu, memoria,... de todos los contenedores
dk   s c, stats c        -> Lista contenedores con su número para ver el consumo de cpu, memoria,...
dk   ss, stats sort      -> Ordena contenedores por cpu, memoria, ...
dk   p, prune            -> Borrar todos los Contenedores, imágenes, redes, que esten detenidos
dk  -h, h, --help        -> Ayuda (help)


dockerc "$VERSION"
 Copyright (C) 2020 Angel. uGeek
 ugeekpodcast@gmail.com"
exit
fi

if [ "$1" = "st" ] || [ "$1" = "store" ]
then
SVN=$(dpkg --list | grep -i subversion)
if [ "$SVN" = "" ]
then
echo "Para poder descargar dockers desde el dockerc store, necesitas instalar el paquete subversion"
echo "En derivadas de debian, se instala con:"
echo "   sudo apt install subversion"
else
svn export https://github.com/uGeek/dockerc/trunk/store $RUTA_DOCKER_DOTFILE/store --force
fi    
exit
fi


if [ "$1" = "a" ]
then
clear
echo ""
echo "Listado de grupo de dockers disponibles"
echo ""
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g
echo ""
echo -n "Selecciona el grupo de dockers de automontaje: " ; read GRUPO
echo " "
cat $RUTA_DOCKER_DOTFILE/$GRUPO/*.docker > ~/.config/dockerc/dockerc.automount
/bin/bash ~/.config/dockerc/dockerc.automount
exit
fi

if [ "$1" = "i" ]
then
echo "--------"
echo "IMAGENES"
echo "--------"
docker images --format 'table {{.CreatedSince}}\t{{.Repository}}:{{.Tag}}\t{{.Size}}'
echo ""
echo "    $(docker images --format 'table {{.CreatedSince}}\t{{.Repository}}:{{.Tag}}\t{{.Size}}' | tail -n +2 | wc -l) Imagenes en total"
echo ""
exit
fi

if [ "$1" = "ip" ] && [ "$2" = "-a" ] || [ "$1" = "ls" ] && [ "$2" = "ip" ]
then
clear
echo "----------------"
echo "CONTAINERS IP's"    
echo "----------------"   
docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
exit
fi


if [ "$1" = "ls" ] && [ "$2" = "-a" ] || [ "$1" = "ps" ] && [ "$2" = "-a" ] 
then    
echo "----------------------"
echo "CONTAINERS DISPONIBLES"
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
echo ""
exit
fi

if [ "$1" = "ls" ] || [ "$1" = "ps" ]  
then
echo "----------------------------------"
echo "CONTAINERS CORRIENDO Y SUS PUERTOS"    
echo "----------------------------------"
docker ps --format 'table {{.Names}}\t{{.Ports}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
echo ""
exit
fi

if [ "$1" = "u" ] || [ "$1" = "start" ] || [ "$1" = "up" ] 
then
echo "----------------------"
echo "CONTAINERS DISPONIBLES"    
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/up.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres iniciar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/up.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Contenedor $(docker start "$CONTENEDORUP") iniciado"
echo ""
exit
fi


if [ "$1" = "r" ] || [ "$1" = "restart" ] 
then
echo "----------------------"
echo "CONTAINERS DISPONIBLES"    
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/restart.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres reiniciar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/restart.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Contenedor $(docker restart "$CONTENEDORUP") reiniciando"
echo ""
exit
fi




if [ "$1" = "d" ] && [ "$2" = "-a" ] || [ "$1" = "stop" ] && [ "$2" = "-a" ] || [ "$1" = "down" ] && [ "$2" = "-a" ] 
then    
docker stop $(docker ps -q)
exit
fi

if [ "$1" = "d" ] || [ "$1" = "stop" ] || [ "$1" = "down" ] 
then
echo "--------------------"
echo "CONTAINERS CORRIENDO"    
echo "--------------------"
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/down.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres detener: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/down.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Detenido el contenedor $(docker stop "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "rm" ]
then
echo "------------------"
echo "BORRAR CONTAINERS "
echo "------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/remove.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres borrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/remove.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Borrado el contenedor $(docker rm "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "drm" ]
then
echo "------------------"
echo "BORRAR CONTAINERS "
echo "------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/remove.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres borrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/remove.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Detenido el contenedor $(docker stop "$CONTENEDORUP")"
echo ""
echo "    Borrado el contenedor $(docker rm "$CONTENEDORUP")"
echo ""
exit
fi



if [ "$1" = "ip" ]
then
echo "----------------------"
echo "CONTAINERS DISPONIBLES"    
echo "----------------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/ip.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres reiniciar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/ip.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Ip Contenedor $CONTENEDORUP = $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$CONTENEDORUP")"
echo ""
exit
fi


if [ "$1" = "log" ] ||  [ "$1" = "l" ]
then
echo "---------------"
echo "log CONTAINERS "
echo "---------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/logs.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres ver los logs: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/logs.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    log del contenedor $(docker logs -f "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "exec" ] ||  [ "$1" = "e" ]
then
echo "--------------------------------------------"
echo "Entrar o ejecutar un comando del contenedor "
echo "--------------------------------------------"
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/exec.dockerc
echo ""
echo -en "    Selecciona el número del contenedor que quieres entrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/exec.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
docker exec -it "$CONTENEDORUP" sh
echo ""
exit
fi


if [ "$1" = "rmi" ]
then
echo "----------------"
echo "BORRAR IMAGENES "
echo "----------------"
docker images --format 'table {{.Repository}}:{{.Tag}}\t{{.Size}}' | tail -n +2 | nl  2>/dev/null
docker images --format 'table {{.Repository}}:{{.Tag}}' | tail -n +2 > ~/.config/dockerc/image.dockerc
echo ""
echo -en "    Selecciona el número de la imagen que deseas borrar: "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/image.dockerc | sed -n ""$CONTENEDOR""p)
echo ""
echo "    Borrada la imagen $(docker rmi "$CONTENEDORUP")"
echo ""
exit
fi

if [ "$1" = "stats" ] && [ "$2" = "sort" ] || [ "$1" = "ss" ]
then
echo "-----------------------------"
echo "Ordenar por Contenedores por:"
echo "-----------------------------"
echo ""
echo -e " 1 NOMBRE\n 2 CPU\n 3 MEMORIA\n 4 TRAFICO\n"
echo -en "  Selecciona el número por el orden que desees: "
read NUM
echo -en "  Pon r, si quieres que esté ordenado de Mayor a menor:  "
read ORD
echo "NOMBRE              CPU %               MEM %               TRAFICO ENTRADA/SALIDA"
docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.NetIO}}"  | tail -n +2 | sort -nk"$NUM""$ORD"
exit
fi


if [ "$1" = "stats" ] && [ "$2" = "c" ] || [ "$1" = "s" ] && [ "$2" = "c" ]
then
echo "---------------"
echo "log CONTAINERS "
echo "---------------"
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' | nl 2>/dev/null
docker ps -a --format 'table {{.Names}}' |  sed 's|NAMES||g' |  sed 's|PORTS||g' | sort | sed '/^ *#/d; /^ *$/d' > ~/.config/dockerc/stats.dockerc
echo ""
echo -en "    Selecciona el número de contenedor que quieres ver su cpu, memoria, ... "
read CONTENEDOR
CONTENEDORUP=$(cat ~/.config/dockerc/stats.dockerc | sed -n ""$CONTENEDOR""p)
docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.NetIO}}" "$CONTENEDORUP"
exit
fi

if [ "$1" = "stats" ] || [ "$1" = "s" ] 
then
docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemPerc}}\t{{.NetIO}}"
exit
fi

if [ "$1" = "p" ] || [ "$1" = "prune" ]  
then
docker system prune
exit
fi

if [ "$1" = "n" ] 
then
clear
echo ""
echo "Vamos a guardar un nuevo docker."
echo ""
echo "---------------------------------------"
echo "Listado de grupo de dockers disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl
echo ""
echo ""

echo -n " ¿A que grupo pertenece?: "  ; read NUMGRUPO
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)
mkdir -p $RUTA_DOCKER_DOTFILE/$GRUPO/
clear
echo  " "
echo -en "Nombre: " ;         read  NOMBRE
echo -en "Fecha: " ;          read  FECHA
echo -en "Tags: " ;           read  TAGS
echo -en "url: " ;            read  URL
echo -en "Notas: " ;          read  NOTES
echo -en "Usuario: " ;        read  USUARIO
echo -en "Contraseña: " ;     read  CONTRASENAS

echo "#                                 " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#   Name:         $NOMBRE         " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#   Date:         $FECHA          " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#   Tags:         $TAGS           " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#   url:          $URL            " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#                                 " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#   Notes:        $NOTES          " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#   User:         $USUARIO        " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#   Password:     $CONTRASENAS    " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "#                                 " >> $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
echo "$RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker"
$EDITOR $RUTA_DOCKER_DOTFILE/$GRUPO/$NOMBRE.docker
clear
echo "El docker $NOMBRE ha sido guardado con éxito!!!"
exit
fi

if [ "$1" = "vc" ] 
then
clear
echo ""
echo "---------------------------------------"
echo "Listado de grupo de dockers disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl
echo ""
echo -n "Selecciona el número de grupo de dockers deseado: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear
echo ""
echo "-----------------------------------"
echo "Listado de contenedores disponibles"
echo "-----------------------------------"
echo ""
ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g | nl

echo " "
echo -n "  Escribe el número de docker que deseas montar: " ; read NUMDOCKER
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)
DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)
clear
echo ""
echo "Contenedor "$DOCKER""
echo "-------------------"
echo " "
echo " "
cat $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.docker
echo " "
echo " "
echo "-------------------"
echo " "
exit
fi

clear
echo ""
echo "---------------------------------------"
echo "Listado de grupo de dockers disponibles"
echo "---------------------------------------"
echo ""
ls -1F $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | nl 
echo ""
echo -n "Selecciona el número de grupo de dockers deseado: " ; read NUMGRUPO
echo " "
GRUPO=$(ls -1F  $RUTA_DOCKER_DOTFILE/ | grep '/$' | sed s'|/||'g | sed -n ""$NUMGRUPO""p)

clear
echo ""
echo "-----------------------------------"
echo "Listado de contenedores disponibles"
echo "-----------------------------------"
echo ""
ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g | nl
echo " "

echo -n "  Escribe el número de docker que deseas montar: " ; read NUMDOCKER
DOCKER=$(ls -1 $RUTA_DOCKER_DOTFILE/$GRUPO/*.docker | cut -d "." -f1 | sed s'|'$RUTA_DOCKER_DOTFILE/$GRUPO'/||'g  | sed -n ""$NUMDOCKER""p)

$EDITOR $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.docker
clear
echo "Creando el Contenedor "$DOCKER"..."
echo " "
/bin/bash $RUTA_DOCKER_DOTFILE/$GRUPO/$DOCKER.docker
